  **webstudy15-webmvc-SingletonDesignPattern-inst2**		   
  
  - Singleton Design Pattern 
    : 시스템 상에서 단 한번 객체를 생성해서 공유해 사용하고자 할 때 적용하는 디자인 패턴 
      ( 참고 - spring framework 에서 기본 객체 운용 방식이 singleton 방식이다 ) 
      
    적용방안 
    1) private 생성자  :  constructor에 private access modifier를 명시해 외부(클래스)에서 객체 생성하는 것을 원천 차단한다 
    2) private static 멤버변수로 자신의 객체를 생성 : private static 멤버변수는 클래스 로딩시에 한번 초기화되어
    													heap 영역에 객체 생성되고, 객체의 주소값을 meta space의 static 변수공간에 저장 
    3) public static 메서드로 외부에 현 객체를 공유 : public static method는 외부에서 별도의 객체 생성없이 클래스명으로 접근 가능하므로
    													이러한 특성을 이용해 한번 만든 객체의 주소값을 외부에서 이용할 수 있도록 한다 
    																										   		   
  	ex)    public class CompanyDAO{
  				private static CompanyDAO instance=new CompanyDAO(); // 내부에서 생성해서 static 변수에 저장 
  				private CompanyDAO(){} // 외부에서 생성하는 것을 막는다 
  				public static CompanyDAO getInstance(){ // 외부에 현 객체 주소값을 공유 
  					return instance; 
  				}
  				public CompanyVO findCompanyById(String id){
  						// ... 
  				}
  			}	   
  		   ---------------------------------------
  		   외부의 다른 클래스에서 접근해 사용하는 예 
  		   CompanyDAO.getInstance().findCompanyById("id");
  		   
  		   
  		   
  		    
  
 				
				
				
				 				   
























		 			